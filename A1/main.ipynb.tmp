{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-11T09:22:32.515291800Z",
     "start_time": "2025-03-11T09:22:32.489547200Z"
    }
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "\n",
    "import os\n",
    "os.environ['KMP_DUPLICATE_LIB_OK']='True'\n",
    "\n",
    "\n",
    "import torch\n",
    "import torch.nn as nn\n",
    "import torch.optim as optim\n",
    "from torch.utils.data import Dataset, DataLoader, random_split\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "\n",
    "import numpy as np\n",
    "from IPython.display import Image, display"
   ],
   "id": "179fd83169822000"
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. 自定义 Dataset 类与数据生成"
   ],
   "id": "5b633f1616ca229d"
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-11T09:22:32.567519900Z",
     "start_time": "2025-03-11T09:22:32.502617500Z"
    }
   },
   "outputs": [],
   "source": [
    "class CustomDataset(Dataset):\n",
    "    def __init__(self, features, outputs):\n",
    "        self.features = features\n",
    "        self.outputs = outputs\n",
    "\n",
    "    def __len__(self):\n",
    "        return len(self.features)\n",
    "\n",
    "    def __getitem__(self, idx):\n",
    "        return self.features[idx], self.outputs[idx]\n",
    "\n",
    "\n",
    "def generate_data(num_samples, noise_std=0.1):\n",
    "    X = torch.randn(num_samples, 2)\n",
    "    true_w = torch.tensor([6.0, 3.0]).unsqueeze(1)  \n",
    "    true_b = 1.0\n",
    "    y = X.matmul(true_w) + true_b\n",
    "    noise = noise_std * torch.randn(num_samples, 1)\n",
    "    y += noise\n",
    "    return X, y"
   ],
   "id": "6629978eb3f99d35"
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. 模型定义：线性回归模型"
   ],
   "id": "89f4c9ba5b4abd29"
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-11T09:22:32.568820Z",
     "start_time": "2025-03-11T09:22:32.517806300Z"
    }
   },
   "outputs": [],
   "source": [
    "class LinearRegressionModel(nn.Module):\n",
    "    def __init__(self, input_dim, output_dim):\n",
    "        super(LinearRegressionModel, self).__init__()\n",
    "        self.linear = nn.Linear(input_dim, output_dim)\n",
    "    \n",
    "    def forward(self, x):\n",
    "        return self.linear(x)"
   ],
   "id": "a127c5d42e46f274"
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. 模型训练与验证函数"
   ],
   "id": "1d9f3f756d12bdd"
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-11T09:22:32.602320500Z",
     "start_time": "2025-03-11T09:22:32.533601800Z"
    }
   },
   "outputs": [],
   "source": [
    "def train_model(model, train_loader, val_loader, criterion, optimizer, num_epochs):\n",
    "    train_losses = []\n",
    "    val_losses = []\n",
    "    \n",
    "    for epoch in range(num_epochs):\n",
    "        model.train()\n",
    "        running_loss = 0.0\n",
    "        for inputs, labels in train_loader:\n",
    "            optimizer.zero_grad()\n",
    "            outputs = model(inputs)\n",
    "            loss = criterion(outputs, labels)\n",
    "            loss.backward()\n",
    "            optimizer.step()\n",
    "            running_loss += loss.item() * inputs.size(0)\n",
    "        \n",
    "        epoch_train_loss = running_loss / len(train_loader.dataset)\n",
    "        train_losses.append(epoch_train_loss)\n",
    "        \n",
    "        model.eval()\n",
    "        val_running_loss = 0.0\n",
    "        with torch.no_grad():\n",
    "            for inputs, labels in val_loader:\n",
    "                outputs = model(inputs)\n",
    "                loss = criterion(outputs, labels)\n",
    "                val_running_loss += loss.item() * inputs.size(0)\n",
    "        epoch_val_loss = val_running_loss / len(val_loader.dataset)\n",
    "        val_losses.append(epoch_val_loss)\n",
    "        \n",
    "        print(f\"Epoch [{epoch+1}/{num_epochs}], Train Loss: {epoch_train_loss:.3f}, Val Loss: {epoch_val_loss:.3f}\")\n",
    "    \n",
    "    return train_losses, val_losses"
   ],
   "id": "8c256a4c4f4b316d"
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. 数据准备、训练、绘图与结果输出"
   ],
   "id": "d86c6ff7a75ccae8"
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2025-03-11T09:22:34.101466800Z",
     "start_time": "2025-03-11T09:22:32.548601300Z"
    }
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch [1/100], Train Loss: 49.518, Val Loss: 46.043\n",
      "Epoch [2/100], Train Loss: 44.269, Val Loss: 41.180\n",
      "Epoch [3/100], Train Loss: 39.586, Val Loss: 36.770\n",
      "Epoch [4/100], Train Loss: 35.345, Val Loss: 32.836\n",
      "Epoch [5/100], Train Loss: 31.527, Val Loss: 29.348\n",
      "Epoch [6/100], Train Loss: 28.164, Val Loss: 26.128\n",
      "Epoch [7/100], Train Loss: 25.065, Val Loss: 23.310\n",
      "Epoch [8/100], Train Loss: 22.311, Val Loss: 20.766\n",
      "Epoch [9/100], Train Loss: 19.872, Val Loss: 18.413\n",
      "Epoch [10/100], Train Loss: 17.669, Val Loss: 16.308\n",
      "Epoch [11/100], Train Loss: 15.665, Val Loss: 14.466\n",
      "Epoch [12/100], Train Loss: 13.895, Val Loss: 12.817\n",
      "Epoch [13/100], Train Loss: 12.302, Val Loss: 11.360\n",
      "Epoch [14/100], Train Loss: 10.902, Val Loss: 10.005\n",
      "Epoch [15/100], Train Loss: 9.623, Val Loss: 8.826\n",
      "Epoch [16/100], Train Loss: 8.481, Val Loss: 7.785\n",
      "Epoch [17/100], Train Loss: 7.485, Val Loss: 6.817\n",
      "Epoch [18/100], Train Loss: 6.573, Val Loss: 5.976\n",
      "Epoch [19/100], Train Loss: 5.771, Val Loss: 5.225\n",
      "Epoch [20/100], Train Loss: 5.045, Val Loss: 4.581\n",
      "Epoch [21/100], Train Loss: 4.423, Val Loss: 3.981\n",
      "Epoch [22/100], Train Loss: 3.859, Val Loss: 3.452\n",
      "Epoch [23/100], Train Loss: 3.351, Val Loss: 3.006\n",
      "Epoch [24/100], Train Loss: 2.912, Val Loss: 2.611\n",
      "Epoch [25/100], Train Loss: 2.526, Val Loss: 2.254\n",
      "Epoch [26/100], Train Loss: 2.181, Val Loss: 1.949\n",
      "Epoch [27/100], Train Loss: 1.882, Val Loss: 1.676\n",
      "Epoch [28/100], Train Loss: 1.621, Val Loss: 1.431\n",
      "Epoch [29/100], Train Loss: 1.385, Val Loss: 1.231\n",
      "Epoch [30/100], Train Loss: 1.189, Val Loss: 1.046\n",
      "Epoch [31/100], Train Loss: 1.011, Val Loss: 0.893\n",
      "Epoch [32/100], Train Loss: 0.861, Val Loss: 0.759\n",
      "Epoch [33/100], Train Loss: 0.732, Val Loss: 0.640\n",
      "Epoch [34/100], Train Loss: 0.617, Val Loss: 0.541\n",
      "Epoch [35/100], Train Loss: 0.521, Val Loss: 0.454\n",
      "Epoch [36/100], Train Loss: 0.437, Val Loss: 0.382\n",
      "Epoch [37/100], Train Loss: 0.368, Val Loss: 0.318\n",
      "Epoch [38/100], Train Loss: 0.306, Val Loss: 0.268\n",
      "Epoch [39/100], Train Loss: 0.256, Val Loss: 0.222\n",
      "Epoch [40/100], Train Loss: 0.213, Val Loss: 0.184\n",
      "Epoch [41/100], Train Loss: 0.176, Val Loss: 0.153\n",
      "Epoch [42/100], Train Loss: 0.146, Val Loss: 0.127\n",
      "Epoch [43/100], Train Loss: 0.121, Val Loss: 0.105\n",
      "Epoch [44/100], Train Loss: 0.100, Val Loss: 0.087\n",
      "Epoch [45/100], Train Loss: 0.083, Val Loss: 0.072\n",
      "Epoch [46/100], Train Loss: 0.069, Val Loss: 0.060\n",
      "Epoch [47/100], Train Loss: 0.057, Val Loss: 0.050\n",
      "Epoch [48/100], Train Loss: 0.047, Val Loss: 0.042\n",
      "Epoch [49/100], Train Loss: 0.040, Val Loss: 0.035\n",
      "Epoch [50/100], Train Loss: 0.033, Val Loss: 0.029\n",
      "Epoch [51/100], Train Loss: 0.028, Val Loss: 0.025\n",
      "Epoch [52/100], Train Loss: 0.024, Val Loss: 0.022\n",
      "Epoch [53/100], Train Loss: 0.021, Val Loss: 0.019\n",
      "Epoch [54/100], Train Loss: 0.018, Val Loss: 0.017\n",
      "Epoch [55/100], Train Loss: 0.016, Val Loss: 0.015\n",
      "Epoch [56/100], Train Loss: 0.015, Val Loss: 0.014\n",
      "Epoch [57/100], Train Loss: 0.013, Val Loss: 0.012\n",
      "Epoch [58/100], Train Loss: 0.012, Val Loss: 0.012\n",
      "Epoch [59/100], Train Loss: 0.012, Val Loss: 0.011\n",
      "Epoch [60/100], Train Loss: 0.011, Val Loss: 0.010\n",
      "Epoch [61/100], Train Loss: 0.010, Val Loss: 0.010\n",
      "Epoch [62/100], Train Loss: 0.010, Val Loss: 0.010\n",
      "Epoch [63/100], Train Loss: 0.010, Val Loss: 0.009\n",
      "Epoch [64/100], Train Loss: 0.010, Val Loss: 0.009\n",
      "Epoch [65/100], Train Loss: 0.010, Val Loss: 0.009\n",
      "Epoch [66/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [67/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [68/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [69/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [70/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [71/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [72/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [73/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [74/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [75/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [76/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [77/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [78/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [79/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [80/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [81/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [82/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [83/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [84/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [85/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [86/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [87/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [88/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [89/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [90/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [91/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [92/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [93/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [94/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [95/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [96/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [97/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [98/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [99/100], Train Loss: 0.009, Val Loss: 0.009\n",
      "Epoch [100/100], Train Loss: 0.009, Val Loss: 0.009\n"
     ]
    }
   ],
   "source": [
    "torch.manual_seed(721)\n",
    "num_samples = 1000\n",
    "noise_std = 0.1\n",
    "features, outputs = generate_data(num_samples, noise_std)\n",
    "\n",
    "dataset = CustomDataset(features, outputs)\n",
    "\n",
    "train_size = int(0.8 * len(dataset))\n",
    "val_size = len(dataset) - train_size\n",
    "train_dataset, val_dataset = random_split(dataset, [train_size, val_size])\n",
    "\n",
    "batch_size = 32\n",
    "train_loader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True)\n",
    "val_loader = DataLoader(val_dataset, batch_size=batch_size, shuffle=False)\n",
    "\n",
    "input_dim = 2\n",
    "output_dim = 1\n",
    "model = LinearRegressionModel(input_dim, output_dim)\n",
    "\n",
    "criterion = nn.MSELoss()\n",
    "optimizer = optim.Adam(model.parameters(), lr=0.01)\n",
    "\n",
    "num_epochs = 100\n",
    "train_losses, val_losses = train_model(model, train_loader, val_loader, criterion, optimizer, num_epochs)\n",
    "\n"
   ],
   "id": "dc865a979a1a07f5"
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Start drawing...\n"
     ]
    },
    {
     "data": {
      "text/plain": "<Figure size 576x432 with 1 Axes>",
      "image/png": "\n"
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trained model parameters:\n",
      "linear.weight: tensor([[5.9992, 2.9968]])\n",
      "linear.bias: tensor([1.0005])\n",
      "No overfit or underfit, it's a good convergence curve.\n"
     ]
    }
   ],
   "source": [
    "print(\"Start drawing...\")\n",
    "epochs = np.arange(1, num_epochs + 1)\n",
    "plt.figure(figsize=(8,6))\n",
    "\n",
    "plt.plot(epochs, train_losses, label='Train Loss')\n",
    "plt.plot(epochs, val_losses, label='Validation Loss')\n",
    "plt.xlabel('Epoch')\n",
    "plt.ylabel('MSE Loss')\n",
    "plt.title('Training and Validation Loss Curve')\n",
    "plt.legend()\n",
    "plt.show()\n",
    "\n",
    "plot_filename = \"loss_curve.png\"\n",
    "plt.close()\n",
    "\n",
    "print(\"Trained model parameters:\")\n",
    "for name, param in model.named_parameters():\n",
    "    if param.requires_grad:\n",
    "        print(f\"{name}: {param.data}\")\n",
    "print(\"No overfit or underfit, it's a good convergence curve.\")"
   ],
   "metadata": {
    "collapsed": false,
    "ExecuteTime": {
     "end_time": "2025-03-11T09:22:34.287064100Z",
     "start_time": "2025-03-11T09:22:34.098435300Z"
    }
   },
   "id": "a96bf314b392ddc6"
  },
  {
   "cell_type": "markdown",
   "source": [
    "# 作业报告\n",
    "\n",
    "## 1. 数据生成的步骤和参数设置\n",
    "- **数据生成**：使用 `generate_data` 函数生成数据，公式如下：\n",
    "  \n",
    "  $$\n",
    "  y = 6 \\times x_1 + 3 \\times x_2 + 1 + \\text{noise}\n",
    "  $$\n",
    "  \n",
    "  其中，`noise` 是标准差为 `0.1` 的高斯噪声，用来模拟真实数据的随机性。\n",
    "- **输入特征**：数据的输入有两个特征（形状为 `(num_samples, 2)`）。\n",
    "- **样本数量**：一共生成了 1000 个样本。\n",
    "- **数据集划分**：把数据按 80% 用于训练，20% 用于验证分开。\n",
    "\n",
    "## 2. 模型结构和超参数设置\n",
    "- **模型结构**：模型只有一层全连接层（`nn.Linear`），输入维度为 2，输出维度为 1，是最简单的线性回归模型。\n",
    "- **损失函数**：采用均方误差（`nn.MSELoss`）。\n",
    "- **优化器**：用 Adam 优化器（`optim.Adam`），学习率设置为 0.01。\n",
    "- **批量大小**：训练和验证时，每个 batch 大小为 32。\n",
    "- **训练轮数**：总共训练了 100 轮。\n",
    "\n",
    "## 3. 损失曲线分析\n",
    "从图中可以看出，随着训练轮数的增加，训练损失和验证损失都迅速下降，后期趋于稳定且接近于 0。这说明模型学到了数据中的线性关系，而且验证集的损失和训练集差不多，没有明显过拟合。\n",
    "\n",
    "## 4. 训练结果讨论和结论\n",
    "1. **收敛速度**：模型在前 20 个 epoch 内迅速收敛，之后损失下降变得比较缓慢。\n",
    "2. **模型效果**：最终训练和验证loss都非常低，说明模型很好的拟合了数据。\n",
    "3. **过拟合情况**：训练集和验证集的损失曲线基本一致，模型没有出现明显的过拟合或欠拟合问题。\n",
    "4. **总结**：对于这样一个简单的线性回归问题，模型表现很好，准确捕捉到了数据中的线性关系，也验证了 PyTorch 实现线性回归的正确性。\n"
   ],
   "metadata": {
    "collapsed": false
   },
   "id": "aa8d095b65f3bec0"
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "name": "python",
   "version": "3.x"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
